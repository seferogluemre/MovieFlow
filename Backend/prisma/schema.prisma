generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum tanımlamaları
enum AgeRating {
  GENERAL
  PARENTAL_GUIDANCE
  TEEN
  MATURE
  ADULT
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  FOLLOWING
  BLOCKED
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
  FRIEND_REQUEST_REJECTED
  FOLLOW
  UNFOLLOW
}

// Kullanıcı modeli
model User {
  id                        Int       @id @default(autoincrement())
  email                     String    @unique
  username                  String    @unique
  password                  String
  name                      String?
  profileImage              String?
  isAdmin                   Boolean   @default(false)
  isPrivate                 Boolean   @default(false)
  isOnline                  Boolean   @default(false)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  isVerified                Boolean   @default(false)
  verificationCode          String?
  verificationCodeExpiresAt DateTime?
  verificationCodeSentAt    DateTime?
  verificationCodeUsed      Boolean   @default(false)

  // İlişkiler
  reviews           Review[]
  ratings           Rating[]
  watchlist         Watchlist[]
  friends           Friendship[]   @relation("userFriends")
  friendsOf         Friendship[]   @relation("friendsOfUser")
  wishlist          Wishlist[]
  library           Library[]
  Session           Session[]
  notifications     Notification[]
  sentNotifications Notification[] @relation("NotificationFromUser")

  @@map("users")
}

// Film modeli
model Movie {
  id          Int       @id @default(autoincrement())
  title       String
  description String    @db.Text
  releaseYear Int
  duration    Int
  posterImage String?
  director    String
  rating      Float     @default(0)
  ageRating   AgeRating @default(GENERAL)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // İlişkiler
  genres    MovieGenre[]
  actors    MovieActor[]
  reviews   Review[]
  ratings   Rating[]
  watchlist Watchlist[]
  wishlist  Wishlist[]
  library   Library[]

  @@map("movies")
}

// Oyuncu modeli
model Actor {
  id          Int      @id @default(autoincrement())
  name        String
  biography   String?  @db.Text
  birthYear   Int?
  nationality String?
  photo       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  movies MovieActor[]

  @@map("actors")
}

// Tür modeli
model Genre {
  id     Int          @id @default(autoincrement())
  name   String       @unique
  movies MovieGenre[]

  @@map("genres")
}

// Film değerlendirme modeli
model Review {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@unique([userId, movieId])
  @@map("reviews")
}

// Film puanlama modeli
model Rating {
  id        Int      @id @default(autoincrement())
  score     Int // 1-5 arası puan
  createdAt DateTime @default(now())

  // İlişkiler
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@unique([userId, movieId])
  @@map("ratings")
}

// İzleme listesi modeli
model Watchlist {
  id      Int      @id @default(autoincrement())
  addedAt DateTime @default(now())

  // İlişkiler
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@unique([userId, movieId])
  @@map("user_watchlist")
}

// İstek listesi modeli
model Wishlist {
  id      Int      @id @default(autoincrement())
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  movie   Movie    @relation(fields: [movieId], references: [id])
  movieId Int
  addedAt DateTime @default(now())

  @@unique([userId, movieId])
  @@map("user_wishlist")
}

// ------------------------------------------------------------
// Kütüphane modeli
model Library {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  movie       Movie     @relation(fields: [movieId], references: [id])
  movieId     Int
  addedAt     DateTime  @default(now())
  lastWatched DateTime?

  @@unique([userId, movieId])
  @@map("libraries")
}

// Arkadaşlık modeli
model Friendship {
  id        Int              @id @default(autoincrement())
  user      User             @relation("userFriends", fields: [userId], references: [id])
  userId    Int
  friend    User             @relation("friendsOfUser", fields: [friendId], references: [id])
  friendId  Int
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())

  @@unique([userId, friendId])
  @@map("friendships")
}

// Ara tablolar
model MovieGenre {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([movieId, genreId])
  @@map("movie_genres")
}

model MovieActor {
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId Int
  actor   Actor  @relation(fields: [actorId], references: [id])
  actorId Int
  role    String // Oyuncunun canlandırdığı karakter

  @@id([movieId, actorId])
  @@map("movie_actors")
}

model Session {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime
  expiresAt DateTime
  revokedAt DateTime?

  @@map("sessions")
}

model Notification {
  id         Int              @id @default(autoincrement())
  type       NotificationType
  message    String
  userId     Int
  fromUserId Int
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  metadata   Json?            @default("{}")
  user       User             @relation(fields: [userId], references: [id])
  fromUser   User             @relation("NotificationFromUser", fields: [fromUserId], references: [id])

  @@map("notifications")
}
